###################################################
# Adrian's Personal .gitignore Template
# 
# Hi everyone. This template provides a comprehensive collection of rules to help exclude unwanted files and directories 
# from a Git repository. It's tailored for a variety of use cases and development environments.
#
# Overview:
# 1. General exclusions (e.g., history directories, macOS metadata)
# 2. Node.js related exclusions (logs, dependency directories, cache, etc.)
# 3. Java-specific exclusions (compiled files, build artifacts)
# 4. Build tools (Maven, Gradle)
# 5. IDEs (IntelliJ, Eclipse, NetBeans, Visual Studio Code)
# 6. OS-specific (e.g., .DS_Store for macOS)
#
# Feel free to modify and expand upon this template as needed for your projects.
###################################################
# Latest update: 2023 Sep 19 

# ————————————————————————————————————————————————————————————————————————————————————————————————————————————————
# gitignore一定要在上传GitHub之前设置好，要不然很多文件都会保留在git中

# 排除历史文件夹
废弃历史/
本地历史/
历史/

# .DS_Store 文件是 macOS 系统生成的隐藏文件，用于存储文件夹的元数据和布局信息。它并不是你项目中实际需要的文件，通常不应该被包含在版本控制中，因为它可能导致跨不同系统的不一致性。
# 首先，删除本地仓库中的 .DS_Store 文件：
# git rm --cached .DS_Store
# 上述命令会从版本控制中移除 .DS_Store 文件，但不会删除本地文件。
# 更新 .gitignore 文件：
# 在你的项目根目录下找到 .gitignore 文件，如果没有则创建一个。在该文件中添加以下内容：
# .DS_Store
# 这样配置后，Git 将自动忽略 .DS_Store 文件，不再将其包含在版本控制中。
.DS_Store

# ————————————————————————————————————————————————————————————————————————————————————————————————————————————————
# 这是使用react时react自己生成的原生模板 

# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

# production
/build

# misc
.DS_Store
.env.local
.env.development.local
.env.test.local
.env.production.local

npm-debug.log*
yarn-debug.log*
yarn-error.log*

# ————————————————————————————————————————————————————————————————————————————————————————————————————————————————
# 以下是Github上的gitignore - Node模版。包含.env node_modules 等等 

# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*
.pnpm-debug.log*

# Diagnostic reports (https://nodejs.org/api/report.html)
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage
*.lcov

# nyc test coverage
.nyc_output

# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# Bower dependency directory (https://bower.io/)
bower_components

# node-waf configuration
.lock-wscript

# Compiled binary addons (https://nodejs.org/api/addons.html)
build/Release

# Dependency directories
node_modules/
jspm_packages/

# Snowpack dependency directory (https://snowpack.dev/)
web_modules/

# TypeScript cache
*.tsbuildinfo

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Optional stylelint cache
.stylelintcache

# Microbundle cache
.rpt2_cache/
.rts2_cache_cjs/
.rts2_cache_es/
.rts2_cache_umd/

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variable files
.env
.env.development.local
.env.test.local
.env.production.local
.env.local

# parcel-bundler cache (https://parceljs.org/)
.cache
.parcel-cache

# Next.js build output
.next
out

# Nuxt.js build / generate output
.nuxt
dist

# Gatsby files
.cache/
# Comment in the public line in if your project uses Gatsby and not Next.js
# https://nextjs.org/blog/next-9-1#public-directory-support
# public

# vuepress build output
.vuepress/dist

# vuepress v2.x temp and cache directory
.temp
.cache

# Docusaurus cache and generated files
.docusaurus

# Serverless directories
.serverless/

# FuseBox cache
.fusebox/

# DynamoDB Local files
.dynamodb/

# TernJS port file
.tern-port

# Stores VSCode versions used for testing VSCode extensions
.vscode-test

# yarn v2
.yarn/cache
.yarn/unplugged
.yarn/build-state.yml
.yarn/install-state.gz
.pnp.*

# ————————————————————————————————————————————————————————————————————————————————————————————————————————————————
# 以下是Java的一个模版 A complete .gitignore file for Java. 

##############################
## Java
##############################
.mtj.tmp/
*.class
*.jar
*.war
*.ear
*.nar
hs_err_pid*
replay_pid*

##############################
## Maven
##############################
target/
pom.xml.tag
pom.xml.releaseBackup
pom.xml.versionsBackup
pom.xml.next
pom.xml.bak
release.properties
dependency-reduced-pom.xml
buildNumber.properties
.mvn/timing.properties
.mvn/wrapper/maven-wrapper.jar

##############################
## Gradle
##############################
bin/
build/
.gradle
.gradletasknamecache
gradle-app.setting
!gradle-wrapper.jar

##############################
## IntelliJ
##############################
out/
.idea/
.idea_modules/
*.iml
*.ipr
*.iws

##############################
## Eclipse
##############################
.settings/
bin/
tmp/
.metadata
.classpath
.project
*.tmp
*.bak
*.swp
*~.nib
local.properties
.loadpath
.factorypath

##############################
## NetBeans
##############################
nbproject/private/
build/
nbbuild/
dist/
nbdist/
nbactions.xml
nb-configuration.xml

##############################
## Visual Studio Code
##############################
.vscode/
.code-workspace

##############################
## OS X
##############################
.DS_Store

# ————————————————————————————————————————————————————————————————————————————————————————————————————————————————
# 以下是 JavaScript/Chrome 插件的 .gitignore 模板。

# Logs
logs
*.log
npm-debug.log*

# Runtime data
pids
*.pid
*.seed

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage

# nyc test coverage
.nyc_output

# Grunt intermediate storage (http://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# node-waf configuration
.lock-wscript

# Compiled binary addons (http://nodejs.org/api/addons.html)
build/Release

# Dependency directories
node_modules
jspm_packages

# Optional npm cache directory
.npm

# Optional REPL history
.node_repl_history

# Recycle Bin used on file shares
$RECYCLE.BIN/

# VS Code directories
.vscode/

# JetBrains IDE
.idea/

# User-specific stuff
*.rsuser
*.suo
*.user
*.userosscache
*.sln.docstates

# Windows image file caches
ehthumbs.db

# Folder config file
Desktop.ini

# Windows thumbnail cache files
Thumbs.db

# Mac
.DS_Store

# Chrome plugin dist
chrome-dist/

# Temporary files
*.tmp
*.swp

# Keys
*.pem
*.key

# ————————————————————————————————————————————————————————————————————————————————————————————————————————————————

